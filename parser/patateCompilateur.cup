// CUP specification for a simple expression evaluator (w/ actions)

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;

terminal LPAR, RPAR, SEMIC, PLUS, MULT, LACC, RACC, INC_OP, DEC_OP, AND, MOINS, TILD, NE, DIV, MOD,
	 LEFT_OP, RIGHT_OP, LEFT, RIGHT, LE_OP, GE_OP, EQ_OP, NE_OP, XOR, OR, AND_OP, OR_OP, EQ,
	 MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN,
	 AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN;
terminal INT;
terminal ID;
terminal IF, AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ELSE, ENUM, EXTERN,
	 FLOAT, FOR, GOTO, LONG, REGISTER, RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH,
	 TYPEDEF, UNION, UNSIGNED, VOID, VOLATILE, WHILE;


/* The grammar */
non terminal expr, term, factor;
non terminal axiom;

start with axiom;

axiom ::=       expr:t SEMIC
                {: System.out.println("Reduction axiom -> expr SEMIC"); :}
                ;

expr ::=        expr:t1 PLUS term:t2
                {: System.out.println("Reduction expr -> expr + term"); :}
                | term:t
                {: System.out.println("Reduction expr -> term"); :}
                ;

term ::=        term:t1 MULT  factor:t2
                {: System.out.println("Reduction terme -> terme MULT facteur"); :}
                | factor:t
                {: System.out.println("Reduction terme -> facteur"); :}
                ;

factor ::=      LPAR expr:t  RPAR
                {: System.out.println("Reduction factor -> LPAR expr RPAR"); :}
                | ID:t
                {: System.out.println("Reduction factor -> ID"); :}
                ;
