
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 24 15:54:16 CET 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 24 15:54:16 CET 2015
  */
public class PatateCompilateurParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PatateCompilateurParser() {super();}

  /** Constructor which sets the default scanner. */
  public PatateCompilateurParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PatateCompilateurParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\003\000\002\004\004\000\002" +
    "\004\005\000\002\006\003\000\002\006\005\000\002\010" +
    "\004\000\002\010\005\000\002\041\003\000\002\041\004" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\014\007\000\002\014" +
    "\007\000\002\014\010\000\002\013\007\000\002\013\011" +
    "\000\002\012\005\000\002\012\004\000\002\012\004\000" +
    "\002\011\003\000\002\011\004\000\002\011\004\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\006\000\002\016\005\000\002\016\006\000\002\016\005" +
    "\000\002\016\005\000\002\016\004\000\002\016\004\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\005\000\002\037\003\000\002\037\005\000\002\037" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\005\000\002\017\003\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\024\003\000\002" +
    "\024\005\000\002\024\005\000\002\022\003\000\002\022" +
    "\005\000\002\022\005\000\002\025\003\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\027\003\000\002\027\005\000\002\027\005\000\002" +
    "\026\003\000\002\026\005\000\002\030\003\000\002\030" +
    "\005\000\002\031\003\000\002\031\005\000\002\032\003" +
    "\000\002\032\005\000\002\033\003\000\002\033\005\000" +
    "\002\034\003\000\002\034\005\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\042\004\000" +
    "\002\043\005\000\002\044\003\000\002\044\004\000\002" +
    "\046\007\000\002\046\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\006\000\002\051\006\000\002\054\007\000\002\052" +
    "\003\000\002\052\003\000\002\052\004\000\002\052\004" +
    "\000\002\056\006\000\002\056\007\000\002\056\007\000" +
    "\002\056\010\000\002\055\005\000\002\055\006\000\002" +
    "\055\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\012\003\006\076\012\101\007\103\005\001" +
    "\002\000\004\002\u0106\001\002\000\004\106\u0102\001\002" +
    "\000\014\002\ufff7\003\ufff7\076\ufff7\101\ufff7\103\ufff7\001" +
    "\002\000\004\106\376\001\002\000\014\002\uffff\003\uffff" +
    "\076\uffff\101\uffff\103\uffff\001\002\000\014\002\000\003" +
    "\006\076\012\101\007\103\005\001\002\000\004\106\014" +
    "\001\002\000\014\002\ufffe\003\ufffe\076\ufffe\101\ufffe\103" +
    "\ufffe\001\002\000\004\004\015\001\002\000\006\005\370" +
    "\106\323\001\002\000\006\006\020\011\021\001\002\000" +
    "\014\002\ufff9\003\ufff9\076\ufff9\101\ufff9\103\ufff9\001\002" +
    "\000\014\002\ufff8\003\ufff8\076\ufff8\101\ufff8\103\ufff8\001" +
    "\002\000\074\003\060\004\105\006\031\007\046\010\026" +
    "\011\021\012\062\013\034\014\024\015\040\017\036\020" +
    "\101\056\035\060\027\067\104\070\106\071\057\072\063" +
    "\073\072\074\032\075\073\102\045\106\050\111\103\112" +
    "\056\113\047\115\064\134\054\150\077\001\002\000\074" +
    "\003\uffed\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020\uffed\056\uffed" +
    "\060\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074" +
    "\uffed\075\uffed\102\uffed\106\uffed\111\uffed\112\uffed\113\uffed" +
    "\115\uffed\134\uffed\150\uffed\001\002\000\074\003\060\004" +
    "\105\006\031\007\046\010\026\011\021\012\365\013\034" +
    "\014\024\015\040\017\036\020\101\056\035\060\027\067" +
    "\104\070\106\071\057\072\063\073\072\074\032\075\073" +
    "\102\045\106\050\111\103\112\056\113\047\115\064\134" +
    "\054\150\077\001\002\000\044\004\105\007\046\010\026" +
    "\013\034\014\024\015\040\017\036\020\101\056\035\060" +
    "\027\067\104\070\106\071\057\072\063\106\114\111\103" +
    "\112\056\001\002\000\074\003\ufff0\004\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\017\ufff0\020\ufff0\056\ufff0\060\ufff0\067\ufff0\070\ufff0\071" +
    "\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\102\ufff0\106\ufff0" +
    "\111\ufff0\112\ufff0\113\ufff0\115\ufff0\134\ufff0\150\ufff0\001" +
    "\002\000\044\004\uffbe\007\uffbe\010\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\017\uffbe\020\uffbe\056\uffbe\060\uffbe\067\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\106\uffbe\111\uffbe\112\uffbe\001\002" +
    "\000\026\003\356\004\105\060\027\067\104\070\106\071" +
    "\057\072\063\106\114\111\103\112\056\001\002\000\050" +
    "\005\uffb2\006\uffb2\007\126\015\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\053\uffb2\056\127\057\uffb2\001" +
    "\002\000\076\003\uffde\004\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde\020" +
    "\uffde\056\uffde\060\uffde\067\uffde\070\uffde\071\uffde\072\uffde" +
    "\073\uffde\074\uffde\075\uffde\102\uffde\106\uffde\111\uffde\112" +
    "\uffde\113\uffde\115\uffde\125\uffde\134\uffde\150\uffde\001\002" +
    "\000\070\003\154\004\105\006\031\007\046\010\026\011" +
    "\021\013\034\014\024\015\040\017\036\020\101\056\035" +
    "\060\027\067\104\070\106\071\057\072\063\073\072\074" +
    "\032\075\073\106\114\111\103\112\056\113\047\115\064" +
    "\134\054\150\077\001\002\000\076\003\uffeb\004\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\056\uffeb\060\uffeb\067\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\102\uffeb" +
    "\106\uffeb\111\uffeb\112\uffeb\113\uffeb\115\uffeb\125\uffeb\134" +
    "\uffeb\150\uffeb\001\002\000\044\004\105\007\046\010\026" +
    "\013\034\014\024\015\040\017\036\020\101\056\035\060" +
    "\027\067\104\070\106\071\057\072\063\106\114\111\103" +
    "\112\056\001\002\000\044\004\uffbc\007\uffbc\010\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\056\uffbc\060\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\072\uffbc\106\uffbc\111\uffbc\112" +
    "\uffbc\001\002\000\044\004\uffbb\007\uffbb\010\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\017\uffbb\020\uffbb\056\uffbb\060\uffbb\067" +
    "\uffbb\070\uffbb\071\uffbb\072\uffbb\106\uffbb\111\uffbb\112\uffbb" +
    "\001\002\000\116\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\013\uffd9\014\uffd9\015\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\053\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\001\002\000\044\004\uffbf\007\uffbf\010\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\056\uffbf\060\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\072\uffbf\106\uffbf\111\uffbf\112" +
    "\uffbf\001\002\000\014\005\uff9d\006\uff9d\036\345\053\uff9d" +
    "\057\uff9d\001\002\000\030\005\uffa7\006\uffa7\015\uffa7\031" +
    "\164\032\165\033\uffa7\034\uffa7\035\uffa7\036\uffa7\053\uffa7" +
    "\057\uffa7\001\002\000\076\003\uffe9\004\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\017\uffe9\020\uffe9\056\uffe9\060\uffe9\067\uffe9\070\uffe9\071" +
    "\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\102\uffe9\106\uffe9" +
    "\111\uffe9\112\uffe9\113\uffe9\115\uffe9\125\uffe9\134\uffe9\150" +
    "\uffe9\001\002\000\022\005\uffa3\006\uffa3\033\160\034\uffa3" +
    "\035\uffa3\036\uffa3\053\uffa3\057\uffa3\001\002\000\004\106" +
    "\341\001\002\000\044\004\uffbd\007\uffbd\010\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\017\uffbd\020\uffbd\056\uffbd\060\uffbd\067" +
    "\uffbd\070\uffbd\071\uffbd\072\uffbd\106\uffbd\111\uffbd\112\uffbd" +
    "\001\002\000\004\004\333\001\002\000\114\003\uffca\004" +
    "\uffca\006\uffca\007\uffca\010\uffca\013\uffca\014\uffca\015\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\235\053\uffca\056\uffca" +
    "\060\uffca\061\uffca\062\uffca\001\002\000\006\006\234\053" +
    "\145\001\002\000\076\003\uffe8\004\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017" +
    "\uffe8\020\uffe8\056\uffe8\060\uffe8\067\uffe8\070\uffe8\071\uffe8" +
    "\072\uffe8\073\uffe8\074\uffe8\075\uffe8\102\uffe8\106\uffe8\111" +
    "\uffe8\112\uffe8\113\uffe8\115\uffe8\125\uffe8\134\uffe8\150\uffe8" +
    "\001\002\000\074\003\uffec\004\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec" +
    "\020\uffec\056\uffec\060\uffec\067\uffec\070\uffec\071\uffec\072" +
    "\uffec\073\uffec\074\uffec\075\uffec\102\uffec\106\uffec\111\uffec" +
    "\112\uffec\113\uffec\115\uffec\134\uffec\150\uffec\001\002\000" +
    "\044\004\105\007\046\010\026\013\034\014\024\015\040" +
    "\017\036\020\101\056\035\060\027\067\104\070\106\071" +
    "\057\072\063\106\114\111\103\112\056\001\002\000\102" +
    "\003\226\005\uffb9\006\uffb9\007\uffb9\010\uffb9\015\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\223\040\217\041\222\042\227\043\221\044\220" +
    "\047\224\050\216\051\230\053\uffb9\056\uffb9\057\uffb9\001" +
    "\002\000\160\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\047\uffc8\050\uffc8\051\uffc8\053\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\072\uffc8\073\uffc8\074\uffc8\075\uffc8\106\uffc8\111\uffc8\112" +
    "\uffc8\113\uffc8\115\uffc8\134\uffc8\150\uffc8\001\002\000\160" +
    "\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\053\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\106\uffd1\111\uffd1\112\uffd1\113\uffd1" +
    "\115\uffd1\134\uffd1\150\uffd1\001\002\000\074\003\uff8c\004" +
    "\uff8c\006\155\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\017\uff8c\020\uff8c\056\uff8c\060\uff8c\067" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c" +
    "\102\uff8c\106\uff8c\111\uff8c\112\uff8c\113\uff8c\115\uff8c\134" +
    "\uff8c\150\uff8c\001\002\000\004\006\215\001\002\000\112" +
    "\002\ufff2\003\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2" +
    "\056\ufff2\060\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\076\ufff2\101\ufff2\102\ufff2\103\ufff2" +
    "\105\ufff2\106\ufff2\111\ufff2\112\ufff2\113\ufff2\115\ufff2\125" +
    "\ufff2\134\ufff2\140\ufff2\150\ufff2\001\002\000\160\003\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\053\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074" +
    "\uffcf\075\uffcf\106\uffcf\111\uffcf\112\uffcf\113\uffcf\115\uffcf" +
    "\134\uffcf\150\uffcf\001\002\000\004\006\214\001\002\000" +
    "\116\003\uffc3\004\202\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\013\201\014\203\015\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\053\uffc3\056\uffc3\057\uffc3\060\200\061\177\062\204\001" +
    "\002\000\160\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\067\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\073\uffc6\074\uffc6\075\uffc6\106\uffc6\111\uffc6\112" +
    "\uffc6\113\uffc6\115\uffc6\134\uffc6\150\uffc6\001\002\000\016" +
    "\005\uff9f\006\uff9f\035\175\036\uff9f\053\uff9f\057\uff9f\001" +
    "\002\000\044\005\uffaf\006\uffaf\015\uffaf\023\123\024\124" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\053\uffaf\057\uffaf\001\002" +
    "\000\024\005\uffa5\006\uffa5\015\162\033\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\053\uffa5\057\uffa5\001\002\000\004\106\171" +
    "\001\002\000\004\006\170\001\002\000\020\005\uffa1\006" +
    "\uffa1\034\156\035\uffa1\036\uffa1\053\uffa1\057\uffa1\001\002" +
    "\000\012\005\uffdb\006\uffdb\053\uffdb\057\uffdb\001\002\000" +
    "\160\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\053\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\106\uffc5\111\uffc5\112\uffc5\113" +
    "\uffc5\115\uffc5\134\uffc5\150\uffc5\001\002\000\004\004\150" +
    "\001\002\000\056\005\uffb5\006\uffb5\007\uffb5\010\132\015" +
    "\uffb5\021\133\022\131\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\053\uffb5\056\uffb5\057\uffb5\001\002\000\044" +
    "\004\uffba\007\uffba\010\uffba\013\uffba\014\uffba\015\uffba\017" +
    "\uffba\020\uffba\056\uffba\060\uffba\067\uffba\070\uffba\071\uffba" +
    "\072\uffba\106\uffba\111\uffba\112\uffba\001\002\000\076\003" +
    "\uffea\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\017\uffea\020\uffea\056\uffea\060" +
    "\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea" +
    "\075\uffea\102\uffea\106\uffea\111\uffea\112\uffea\113\uffea\115" +
    "\uffea\125\uffea\134\uffea\150\uffea\001\002\000\160\003\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\053\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074" +
    "\uffc9\075\uffc9\106\uffc9\111\uffc9\112\uffc9\113\uffc9\115\uffc9" +
    "\134\uffc9\150\uffc9\001\002\000\160\003\uffc7\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\053\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7" +
    "\106\uffc7\111\uffc7\112\uffc7\113\uffc7\115\uffc7\134\uffc7\150" +
    "\uffc7\001\002\000\044\004\105\007\046\010\026\013\034" +
    "\014\024\015\040\017\036\020\101\056\035\060\027\067" +
    "\104\070\106\071\057\072\063\106\114\111\103\112\056" +
    "\001\002\000\160\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\047\uffd0\050\uffd0\051\uffd0\053\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\062\uffd0\067\uffd0\070\uffd0\071" +
    "\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\106\uffd0\111\uffd0" +
    "\112\uffd0\113\uffd0\115\uffd0\134\uffd0\150\uffd0\001\002\000" +
    "\074\003\uffee\004\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\017\uffee\020\uffee\056" +
    "\uffee\060\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\075\uffee\102\uffee\106\uffee\111\uffee\112\uffee\113" +
    "\uffee\115\uffee\134\uffee\150\uffee\001\002\000\040\005\uffaa" +
    "\006\uffaa\015\uffaa\025\116\026\120\027\115\030\117\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\053\uffaa" +
    "\057\uffaa\001\002\000\076\003\uffe7\004\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\017\uffe7\020\uffe7\056\uffe7\060\uffe7\067\uffe7\070\uffe7\071" +
    "\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\102\uffe7\106\uffe7" +
    "\111\uffe7\112\uffe7\113\uffe7\115\uffe7\125\uffe7\134\uffe7\150" +
    "\uffe7\001\002\000\044\004\105\007\046\010\026\013\034" +
    "\014\024\015\040\017\036\020\101\056\035\060\027\067" +
    "\104\070\106\071\057\072\063\106\114\111\103\112\056" +
    "\001\002\000\102\003\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\015\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\047\uffc0\050\uffc0\051\uffc0\053\uffc0\056" +
    "\uffc0\057\uffc0\001\002\000\160\003\uffca\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\013\uffca\014\uffca\015" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\047\uffca\050\uffca\051\uffca\053" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\067\uffca" +
    "\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\106" +
    "\uffca\111\uffca\112\uffca\113\uffca\115\uffca\134\uffca\150\uffca" +
    "\001\002\000\044\004\105\007\046\010\026\013\034\014" +
    "\024\015\040\017\036\020\101\056\035\060\027\067\104" +
    "\070\106\071\057\072\063\106\114\111\103\112\056\001" +
    "\002\000\044\004\105\007\046\010\026\013\034\014\024" +
    "\015\040\017\036\020\101\056\035\060\027\067\104\070" +
    "\106\071\057\072\063\106\114\111\103\112\056\001\002" +
    "\000\044\004\105\007\046\010\026\013\034\014\024\015" +
    "\040\017\036\020\101\056\035\060\027\067\104\070\106" +
    "\071\057\072\063\106\114\111\103\112\056\001\002\000" +
    "\044\004\105\007\046\010\026\013\034\014\024\015\040" +
    "\017\036\020\101\056\035\060\027\067\104\070\106\071" +
    "\057\072\063\106\114\111\103\112\056\001\002\000\056" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\015\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\053" +
    "\uffb9\056\uffb9\057\uffb9\001\002\000\044\005\uffad\006\uffad" +
    "\015\uffad\023\123\024\124\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\053\uffad\057\uffad\001\002\000\044\004\105\007\046\010" +
    "\026\013\034\014\024\015\040\017\036\020\101\056\035" +
    "\060\027\067\104\070\106\071\057\072\063\106\114\111" +
    "\103\112\056\001\002\000\044\004\105\007\046\010\026" +
    "\013\034\014\024\015\040\017\036\020\101\056\035\060" +
    "\027\067\104\070\106\071\057\072\063\106\114\111\103" +
    "\112\056\001\002\000\050\005\uffb0\006\uffb0\007\126\015" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\053" +
    "\uffb0\056\127\057\uffb0\001\002\000\044\004\105\007\046" +
    "\010\026\013\034\014\024\015\040\017\036\020\101\056" +
    "\035\060\027\067\104\070\106\071\057\072\063\106\114" +
    "\111\103\112\056\001\002\000\044\004\105\007\046\010" +
    "\026\013\034\014\024\015\040\017\036\020\101\056\035" +
    "\060\027\067\104\070\106\071\057\072\063\106\114\111" +
    "\103\112\056\001\002\000\056\005\uffb3\006\uffb3\007\uffb3" +
    "\010\132\015\uffb3\021\133\022\131\023\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\053\uffb3\056\uffb3\057\uffb3\001" +
    "\002\000\044\004\105\007\046\010\026\013\034\014\024" +
    "\015\040\017\036\020\101\056\035\060\027\067\104\070" +
    "\106\071\057\072\063\106\114\111\103\112\056\001\002" +
    "\000\044\004\105\007\046\010\026\013\034\014\024\015" +
    "\040\017\036\020\101\056\035\060\027\067\104\070\106" +
    "\071\057\072\063\106\114\111\103\112\056\001\002\000" +
    "\044\004\105\007\046\010\026\013\034\014\024\015\040" +
    "\017\036\020\101\056\035\060\027\067\104\070\106\071" +
    "\057\072\063\106\114\111\103\112\056\001\002\000\056" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\015\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\053" +
    "\uffb7\056\uffb7\057\uffb7\001\002\000\056\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\015\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\053\uffb8\056\uffb8\057" +
    "\uffb8\001\002\000\056\005\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\015\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\053\uffb6\056\uffb6\057\uffb6\001\002\000" +
    "\056\005\uffb4\006\uffb4\007\uffb4\010\132\015\uffb4\021\133" +
    "\022\131\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\053\uffb4\056\uffb4\057\uffb4\001\002\000\050\005\uffb1\006" +
    "\uffb1\007\126\015\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\053\uffb1\056\127\057\uffb1\001\002\000\044" +
    "\005\uffab\006\uffab\015\uffab\023\123\024\124\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\053\uffab\057\uffab\001\002\000\044\005" +
    "\uffae\006\uffae\015\uffae\023\123\024\124\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\053\uffae\057\uffae\001\002\000\044\005\uffac" +
    "\006\uffac\015\uffac\023\123\024\124\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\053\uffac\057\uffac\001\002\000\006\005\146\053" +
    "\145\001\002\000\044\004\105\007\046\010\026\013\034" +
    "\014\024\015\040\017\036\020\101\056\035\060\027\067" +
    "\104\070\106\071\057\072\063\106\114\111\103\112\056" +
    "\001\002\000\160\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\067\uffc4\070\uffc4\071" +
    "\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\106\uffc4\111\uffc4" +
    "\112\uffc4\113\uffc4\115\uffc4\134\uffc4\150\uffc4\001\002\000" +
    "\012\005\uffda\006\uffda\053\uffda\057\uffda\001\002\000\044" +
    "\004\105\007\046\010\026\013\034\014\024\015\040\017" +
    "\036\020\101\056\035\060\027\067\104\070\106\071\057" +
    "\072\063\106\114\111\103\112\056\001\002\000\006\005" +
    "\152\053\145\001\002\000\070\003\154\004\105\006\031" +
    "\007\046\010\026\011\021\013\034\014\024\015\040\017" +
    "\036\020\101\056\035\060\027\067\104\070\106\071\057" +
    "\072\063\073\072\074\032\075\073\106\114\111\103\112" +
    "\056\113\047\115\064\134\054\150\077\001\002\000\076" +
    "\003\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5\056\uffe5" +
    "\060\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074" +
    "\uffe5\075\uffe5\102\uffe5\106\uffe5\111\uffe5\112\uffe5\113\uffe5" +
    "\115\uffe5\125\uffe5\134\uffe5\150\uffe5\001\002\000\004\006" +
    "\155\001\002\000\076\003\uffdc\004\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017" +
    "\uffdc\020\uffdc\056\uffdc\060\uffdc\067\uffdc\070\uffdc\071\uffdc" +
    "\072\uffdc\073\uffdc\074\uffdc\075\uffdc\102\uffdc\106\uffdc\111" +
    "\uffdc\112\uffdc\113\uffdc\115\uffdc\125\uffdc\134\uffdc\150\uffdc" +
    "\001\002\000\044\004\105\007\046\010\026\013\034\014" +
    "\024\015\040\017\036\020\101\056\035\060\027\067\104" +
    "\070\106\071\057\072\063\106\114\111\103\112\056\001" +
    "\002\000\022\005\uffa2\006\uffa2\033\160\034\uffa2\035\uffa2" +
    "\036\uffa2\053\uffa2\057\uffa2\001\002\000\044\004\105\007" +
    "\046\010\026\013\034\014\024\015\040\017\036\020\101" +
    "\056\035\060\027\067\104\070\106\071\057\072\063\106" +
    "\114\111\103\112\056\001\002\000\024\005\uffa4\006\uffa4" +
    "\015\162\033\uffa4\034\uffa4\035\uffa4\036\uffa4\053\uffa4\057" +
    "\uffa4\001\002\000\044\004\105\007\046\010\026\013\034" +
    "\014\024\015\040\017\036\020\101\056\035\060\027\067" +
    "\104\070\106\071\057\072\063\106\114\111\103\112\056" +
    "\001\002\000\030\005\uffa6\006\uffa6\015\uffa6\031\164\032" +
    "\165\033\uffa6\034\uffa6\035\uffa6\036\uffa6\053\uffa6\057\uffa6" +
    "\001\002\000\044\004\105\007\046\010\026\013\034\014" +
    "\024\015\040\017\036\020\101\056\035\060\027\067\104" +
    "\070\106\071\057\072\063\106\114\111\103\112\056\001" +
    "\002\000\044\004\105\007\046\010\026\013\034\014\024" +
    "\015\040\017\036\020\101\056\035\060\027\067\104\070" +
    "\106\071\057\072\063\106\114\111\103\112\056\001\002" +
    "\000\040\005\uffa8\006\uffa8\015\uffa8\025\116\026\120\027" +
    "\115\030\117\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\053\uffa8\057\uffa8\001\002\000\040\005\uffa9\006" +
    "\uffa9\015\uffa9\025\116\026\120\027\115\030\117\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\053\uffa9\057" +
    "\uffa9\001\002\000\076\003\uffe0\004\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017" +
    "\uffe0\020\uffe0\056\uffe0\060\uffe0\067\uffe0\070\uffe0\071\uffe0" +
    "\072\uffe0\073\uffe0\074\uffe0\075\uffe0\102\uffe0\106\uffe0\111" +
    "\uffe0\112\uffe0\113\uffe0\115\uffe0\125\uffe0\134\uffe0\150\uffe0" +
    "\001\002\000\004\110\172\001\002\000\024\004\105\060" +
    "\027\067\104\070\106\071\057\072\063\106\114\111\103" +
    "\112\056\001\002\000\070\003\154\004\105\006\031\007" +
    "\046\010\026\011\021\013\034\014\024\015\040\017\036" +
    "\020\101\056\035\060\027\067\104\070\106\071\057\072" +
    "\063\073\072\074\032\075\073\106\114\111\103\112\056" +
    "\113\047\115\064\134\054\150\077\001\002\000\076\003" +
    "\uffe6\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\056\uffe6\060" +
    "\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6" +
    "\075\uffe6\102\uffe6\106\uffe6\111\uffe6\112\uffe6\113\uffe6\115" +
    "\uffe6\125\uffe6\134\uffe6\150\uffe6\001\002\000\044\004\105" +
    "\007\046\010\026\013\034\014\024\015\040\017\036\020" +
    "\101\056\035\060\027\067\104\070\106\071\057\072\063" +
    "\106\114\111\103\112\056\001\002\000\020\005\uffa0\006" +
    "\uffa0\034\156\035\uffa0\036\uffa0\053\uffa0\057\uffa0\001\002" +
    "\000\004\106\213\001\002\000\044\004\105\007\046\010" +
    "\026\013\034\014\024\015\040\017\036\020\101\056\035" +
    "\060\027\067\104\070\106\071\057\072\063\106\114\111" +
    "\103\112\056\001\002\000\116\003\uffd3\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\013\uffd3\014\uffd3\015\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\053\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\001\002\000\046\004\105\005\206" +
    "\007\046\010\026\013\034\014\024\015\040\017\036\020" +
    "\101\056\035\060\027\067\104\070\106\071\057\072\063" +
    "\106\114\111\103\112\056\001\002\000\116\003\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\047\uffd2\050\uffd2\051\uffd2\053\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\001\002\000\004\106" +
    "\205\001\002\000\116\003\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\013\uffd4\014\uffd4\015\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\053\uffd4\056\uffd4\057\uffd4\060\uffd4\061" +
    "\uffd4\062\uffd4\001\002\000\116\003\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\013\uffd7\014\uffd7\015\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\053\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\001\002\000\006\005\210\053\145" +
    "\001\002\000\116\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\013\uffd6\014\uffd6\015\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\053\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\001\002\000\006\053\145\057\212\001\002\000" +
    "\116\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\053\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\001" +
    "\002\000\116\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\013\uffd5\014\uffd5\015\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\053\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\001\002\000\076\003\uffdf\004\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\017" +
    "\uffdf\020\uffdf\056\uffdf\060\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\074\uffdf\075\uffdf\102\uffdf\106\uffdf\111" +
    "\uffdf\112\uffdf\113\uffdf\115\uffdf\125\uffdf\134\uffdf\150\uffdf" +
    "\001\002\000\074\003\uff91\004\uff91\006\uff91\007\uff91\010" +
    "\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\017\uff91" +
    "\020\uff91\056\uff91\060\uff91\067\uff91\070\uff91\071\uff91\072" +
    "\uff91\073\uff91\074\uff91\075\uff91\102\uff91\106\uff91\111\uff91" +
    "\112\uff91\113\uff91\115\uff91\134\uff91\150\uff91\001\002\000" +
    "\044\004\uff94\007\uff94\010\uff94\013\uff94\014\uff94\015\uff94" +
    "\017\uff94\020\uff94\056\uff94\060\uff94\067\uff94\070\uff94\071" +
    "\uff94\072\uff94\106\uff94\111\uff94\112\uff94\001\002\000\044" +
    "\004\uff9a\007\uff9a\010\uff9a\013\uff9a\014\uff9a\015\uff9a\017" +
    "\uff9a\020\uff9a\056\uff9a\060\uff9a\067\uff9a\070\uff9a\071\uff9a" +
    "\072\uff9a\106\uff9a\111\uff9a\112\uff9a\001\002\000\044\004" +
    "\uff96\007\uff96\010\uff96\013\uff96\014\uff96\015\uff96\017\uff96" +
    "\020\uff96\056\uff96\060\uff96\067\uff96\070\uff96\071\uff96\072" +
    "\uff96\106\uff96\111\uff96\112\uff96\001\002\000\044\004\uff97" +
    "\007\uff97\010\uff97\013\uff97\014\uff97\015\uff97\017\uff97\020" +
    "\uff97\056\uff97\060\uff97\067\uff97\070\uff97\071\uff97\072\uff97" +
    "\106\uff97\111\uff97\112\uff97\001\002\000\044\004\uff99\007" +
    "\uff99\010\uff99\013\uff99\014\uff99\015\uff99\017\uff99\020\uff99" +
    "\056\uff99\060\uff99\067\uff99\070\uff99\071\uff99\072\uff99\106" +
    "\uff99\111\uff99\112\uff99\001\002\000\044\004\uff9b\007\uff9b" +
    "\010\uff9b\013\uff9b\014\uff9b\015\uff9b\017\uff9b\020\uff9b\056" +
    "\uff9b\060\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\106\uff9b" +
    "\111\uff9b\112\uff9b\001\002\000\044\004\uff95\007\uff95\010" +
    "\uff95\013\uff95\014\uff95\015\uff95\017\uff95\020\uff95\056\uff95" +
    "\060\uff95\067\uff95\070\uff95\071\uff95\072\uff95\106\uff95\111" +
    "\uff95\112\uff95\001\002\000\044\004\105\007\046\010\026" +
    "\013\034\014\024\015\040\017\036\020\101\056\035\060" +
    "\027\067\104\070\106\071\057\072\063\106\114\111\103" +
    "\112\056\001\002\000\044\004\uff92\007\uff92\010\uff92\013" +
    "\uff92\014\uff92\015\uff92\017\uff92\020\uff92\056\uff92\060\uff92" +
    "\067\uff92\070\uff92\071\uff92\072\uff92\106\uff92\111\uff92\112" +
    "\uff92\001\002\000\044\004\uff98\007\uff98\010\uff98\013\uff98" +
    "\014\uff98\015\uff98\017\uff98\020\uff98\056\uff98\060\uff98\067" +
    "\uff98\070\uff98\071\uff98\072\uff98\106\uff98\111\uff98\112\uff98" +
    "\001\002\000\044\004\uff93\007\uff93\010\uff93\013\uff93\014" +
    "\uff93\015\uff93\017\uff93\020\uff93\056\uff93\060\uff93\067\uff93" +
    "\070\uff93\071\uff93\072\uff93\106\uff93\111\uff93\112\uff93\001" +
    "\002\000\012\005\uff9c\006\uff9c\053\uff9c\057\uff9c\001\002" +
    "\000\006\006\233\053\145\001\002\000\076\003\uffe1\004" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\017\uffe1\020\uffe1\056\uffe1\060\uffe1\067" +
    "\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1" +
    "\102\uffe1\106\uffe1\111\uffe1\112\uffe1\113\uffe1\115\uffe1\125" +
    "\uffe1\134\uffe1\150\uffe1\001\002\000\076\003\uffdd\004\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\017\uffdd\020\uffdd\056\uffdd\060\uffdd\067\uffdd" +
    "\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\102" +
    "\uffdd\106\uffdd\111\uffdd\112\uffdd\113\uffdd\115\uffdd\125\uffdd" +
    "\134\uffdd\150\uffdd\001\002\000\030\003\250\033\237\054" +
    "\244\064\241\065\253\066\243\067\245\077\240\100\246" +
    "\101\251\107\236\001\002\000\012\005\uff88\006\uff88\011" +
    "\uff88\053\uff88\001\002\000\030\003\250\033\237\054\244" +
    "\064\241\065\253\066\243\067\245\077\240\100\246\101" +
    "\251\107\236\001\002\000\030\003\250\033\237\054\244" +
    "\064\241\065\253\066\243\067\245\077\240\100\246\101" +
    "\251\107\236\001\002\000\012\005\uff87\006\uff87\011\uff87" +
    "\053\uff87\001\002\000\012\005\uff8b\006\uff8b\011\uff8b\053" +
    "\uff8b\001\002\000\012\005\uff85\006\uff85\011\uff85\053\uff85" +
    "\001\002\000\004\106\330\001\002\000\012\005\uff84\006" +
    "\uff84\011\uff84\053\uff84\001\002\000\004\011\322\001\002" +
    "\000\010\005\uff90\006\uff90\053\uff90\001\002\000\012\005" +
    "\uff89\006\uff89\011\uff89\053\uff89\001\002\000\004\011\254" +
    "\001\002\000\012\005\uff8a\006\uff8a\011\uff8a\053\uff8a\001" +
    "\002\000\012\005\uff86\006\uff86\011\uff86\053\uff86\001\002" +
    "\000\014\017\257\076\263\105\264\106\255\140\260\001" +
    "\002\000\006\004\015\052\315\001\002\000\016\012\312" +
    "\017\257\076\263\105\264\106\255\140\260\001\002\000" +
    "\004\106\307\001\002\000\004\106\303\001\002\000\016" +
    "\012\uff7d\017\uff7d\076\uff7d\105\uff7d\106\uff7d\140\uff7d\001" +
    "\002\000\016\012\uff7c\017\uff7c\076\uff7c\105\uff7c\106\uff7c" +
    "\140\uff7c\001\002\000\004\106\276\001\002\000\006\106" +
    "\265\140\266\001\002\000\004\052\273\001\002\000\004" +
    "\106\267\001\002\000\004\052\270\001\002\000\030\003" +
    "\250\033\237\054\244\064\241\065\253\066\243\067\245" +
    "\077\240\100\246\101\251\107\236\001\002\000\004\006" +
    "\272\001\002\000\016\012\uff76\017\uff76\076\uff76\105\uff76" +
    "\106\uff76\140\uff76\001\002\000\030\003\250\033\237\054" +
    "\244\064\241\065\253\066\243\067\245\077\240\100\246" +
    "\101\251\107\236\001\002\000\004\006\275\001\002\000" +
    "\016\012\uff77\017\uff77\076\uff77\105\uff77\106\uff77\140\uff77" +
    "\001\002\000\004\004\015\001\002\000\004\052\300\001" +
    "\002\000\030\003\250\033\237\054\244\064\241\065\253" +
    "\066\243\067\245\077\240\100\246\101\251\107\236\001" +
    "\002\000\004\011\021\001\002\000\016\012\uff73\017\uff73" +
    "\076\uff73\105\uff73\106\uff73\140\uff73\001\002\000\004\052" +
    "\304\001\002\000\030\003\250\033\237\054\244\064\241" +
    "\065\253\066\243\067\245\077\240\100\246\101\251\107" +
    "\236\001\002\000\004\006\306\001\002\000\016\012\uff78" +
    "\017\uff78\076\uff78\105\uff78\106\uff78\140\uff78\001\002\000" +
    "\004\004\015\001\002\000\004\011\021\001\002\000\016" +
    "\012\uff74\017\uff74\076\uff74\105\uff74\106\uff74\140\uff74\001" +
    "\002\000\012\005\uff7f\006\uff7f\011\uff7f\053\uff7f\001\002" +
    "\000\016\012\uff7a\017\uff7a\076\uff7a\105\uff7a\106\uff7a\140" +
    "\uff7a\001\002\000\016\012\uff7b\017\uff7b\076\uff7b\105\uff7b" +
    "\106\uff7b\140\uff7b\001\002\000\030\003\250\033\237\054" +
    "\244\064\241\065\253\066\243\067\245\077\240\100\246" +
    "\101\251\107\236\001\002\000\004\011\021\001\002\000" +
    "\016\012\uff75\017\uff75\076\uff75\105\uff75\106\uff75\140\uff75" +
    "\001\002\000\004\006\321\001\002\000\016\012\uff79\017" +
    "\uff79\076\uff79\105\uff79\106\uff79\140\uff79\001\002\000\004" +
    "\106\323\001\002\000\004\052\235\001\002\000\006\012" +
    "\uff8f\106\uff8f\001\002\000\006\012\326\106\323\001\002" +
    "\000\012\005\uff80\006\uff80\011\uff80\053\uff80\001\002\000" +
    "\006\012\uff8e\106\uff8e\001\002\000\012\005\uff83\006\uff83" +
    "\011\uff83\053\uff83\001\002\000\012\005\uff82\006\uff82\011" +
    "\uff82\053\uff82\001\002\000\012\005\uff81\006\uff81\011\uff81" +
    "\053\uff81\001\002\000\044\004\105\007\046\010\026\013" +
    "\034\014\024\015\040\017\036\020\101\056\035\060\027" +
    "\067\104\070\106\071\057\072\063\106\114\111\103\112" +
    "\056\001\002\000\006\005\335\053\145\001\002\000\070" +
    "\003\154\004\105\006\031\007\046\010\026\011\021\013" +
    "\034\014\024\015\040\017\036\020\101\056\035\060\027" +
    "\067\104\070\106\071\057\072\063\073\072\074\032\075" +
    "\073\106\114\111\103\112\056\113\047\115\064\134\054" +
    "\150\077\001\002\000\076\003\uffe3\004\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\017\uffe3\020\uffe3\056\uffe3\060\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\102\uffe3\106\uffe3" +
    "\111\uffe3\112\uffe3\113\uffe3\115\uffe3\125\337\134\uffe3\150" +
    "\uffe3\001\002\000\070\003\154\004\105\006\031\007\046" +
    "\010\026\011\021\013\034\014\024\015\040\017\036\020" +
    "\101\056\035\060\027\067\104\070\106\071\057\072\063" +
    "\073\072\074\032\075\073\106\114\111\103\112\056\113" +
    "\047\115\064\134\054\150\077\001\002\000\076\003\uffe2" +
    "\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\056\uffe2\060\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075" +
    "\uffe2\102\uffe2\106\uffe2\111\uffe2\112\uffe2\113\uffe2\115\uffe2" +
    "\125\uffe2\134\uffe2\150\uffe2\001\002\000\004\037\342\001" +
    "\002\000\030\003\250\033\237\054\244\064\241\065\253" +
    "\066\243\067\245\077\240\100\246\101\251\107\236\001" +
    "\002\000\004\006\344\001\002\000\074\003\uff8d\004\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\017\uff8d\020\uff8d\056\uff8d\060\uff8d\067\uff8d" +
    "\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\102" +
    "\uff8d\106\uff8d\111\uff8d\112\uff8d\113\uff8d\115\uff8d\134\uff8d" +
    "\150\uff8d\001\002\000\044\004\105\007\046\010\026\013" +
    "\034\014\024\015\040\017\036\020\101\056\035\060\027" +
    "\067\104\070\106\071\057\072\063\106\114\111\103\112" +
    "\056\001\002\000\016\005\uff9e\006\uff9e\035\175\036\uff9e" +
    "\053\uff9e\057\uff9e\001\002\000\102\003\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\015\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\044\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\053\uffc2\056\uffc2\057\uffc2\001\002\000\004\150\351" +
    "\001\002\000\004\004\352\001\002\000\044\004\105\007" +
    "\046\010\026\013\034\014\024\015\040\017\036\020\101" +
    "\056\035\060\027\067\104\070\106\071\057\072\063\106" +
    "\114\111\103\112\056\001\002\000\006\005\354\053\145" +
    "\001\002\000\076\003\uffe4\004\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4" +
    "\020\uffe4\056\uffe4\060\uffe4\067\uffe4\070\uffe4\071\uffe4\072" +
    "\uffe4\073\uffe4\074\uffe4\075\uffe4\102\uffe4\106\uffe4\111\uffe4" +
    "\112\uffe4\113\uffe4\115\uffe4\125\uffe4\134\uffe4\150\uffe4\001" +
    "\002\000\006\053\360\057\361\001\002\000\006\053\uffcb" +
    "\057\uffcb\001\002\000\006\053\uffcd\057\uffcd\001\002\000" +
    "\024\004\105\060\027\067\104\070\106\071\057\072\063" +
    "\106\114\111\103\112\056\001\002\000\160\003\uffce\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\013\uffce" +
    "\014\uffce\015\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\047\uffce\050\uffce" +
    "\051\uffce\053\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce" +
    "\075\uffce\106\uffce\111\uffce\112\uffce\113\uffce\115\uffce\134" +
    "\uffce\150\uffce\001\002\000\006\053\uffcc\057\uffcc\001\002" +
    "\000\102\003\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\015" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\056\uffc1\057" +
    "\uffc1\001\002\000\074\003\uffef\004\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017" +
    "\uffef\020\uffef\056\uffef\060\uffef\067\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\074\uffef\075\uffef\102\uffef\106\uffef\111" +
    "\uffef\112\uffef\113\uffef\115\uffef\134\uffef\150\uffef\001\002" +
    "\000\112\002\ufff1\003\ufff1\004\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1" +
    "\020\ufff1\056\ufff1\060\ufff1\067\ufff1\070\ufff1\071\ufff1\072" +
    "\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\101\ufff1\102\ufff1" +
    "\103\ufff1\105\ufff1\106\ufff1\111\ufff1\112\ufff1\113\ufff1\115" +
    "\ufff1\125\ufff1\134\ufff1\140\ufff1\150\ufff1\001\002\000\006" +
    "\005\ufff4\053\ufff4\001\002\000\006\005\372\053\371\001" +
    "\002\000\010\006\ufff6\011\ufff6\052\ufff6\001\002\000\004" +
    "\106\323\001\002\000\010\006\ufff5\011\ufff5\052\ufff5\001" +
    "\002\000\006\005\ufff3\053\ufff3\001\002\000\014\002\ufffd" +
    "\003\ufffd\076\ufffd\101\ufffd\103\ufffd\001\002\000\014\002" +
    "\ufffc\003\ufffc\076\ufffc\101\ufffc\103\ufffc\001\002\000\004" +
    "\011\377\001\002\000\014\017\257\076\263\105\264\106" +
    "\255\140\260\001\002\000\016\012\u0101\017\257\076\263" +
    "\105\264\106\255\140\260\001\002\000\014\002\uff7e\003" +
    "\uff7e\076\uff7e\101\uff7e\103\uff7e\001\002\000\004\004\015" +
    "\001\002\000\006\006\u0105\011\021\001\002\000\014\002" +
    "\ufffb\003\ufffb\076\ufffb\101\ufffb\103\ufffb\001\002\000\014" +
    "\002\ufffa\003\ufffa\076\ufffa\101\ufffa\103\ufffa\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\012\002\003\003\010\005\007\054\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\373\054" +
    "\374\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\015\001\001\000\006\006\366\043\365\001\001\000" +
    "\004\010\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\007\052\010\032\011\101\012\110\013\042\014" +
    "\051\015\050\016\064\017\054\020\111\021\077\022\067" +
    "\024\027\025\107\026\070\027\041\030\043\031\073\032" +
    "\066\033\040\034\074\035\065\036\075\040\024\041\022" +
    "\042\106\043\060\046\021\057\036\001\001\000\002\001" +
    "\001\000\072\007\052\010\032\011\101\012\110\013\042" +
    "\014\051\015\050\016\064\017\054\020\111\021\077\022" +
    "\067\024\027\025\107\026\070\027\041\030\043\031\073" +
    "\032\066\033\040\034\074\035\065\036\075\040\363\042" +
    "\106\043\060\046\021\057\036\001\001\000\016\016\064" +
    "\017\362\020\111\035\065\036\075\057\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\035\065\036\075" +
    "\037\354\057\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\007\347\010\032\011\101\012\110\013\042" +
    "\014\051\015\050\016\064\017\054\020\111\021\077\022" +
    "\067\024\027\025\107\026\070\027\041\030\043\031\073" +
    "\032\066\033\040\034\074\035\065\036\075\057\036\001" +
    "\001\000\002\001\001\000\016\016\064\017\346\020\111" +
    "\035\065\036\075\057\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\015\231\016\064\017\054\020\111" +
    "\021\077\022\067\024\027\025\107\026\070\027\041\030" +
    "\043\031\073\032\066\033\040\034\074\035\065\036\075" +
    "\057\036\001\001\000\004\023\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\015\143\016\064\017\054\020\111\021\077\022\067\024" +
    "\027\025\107\026\070\027\041\030\043\031\073\032\066" +
    "\033\040\034\074\035\065\036\075\057\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\016\064\017\112\020\111\035\065\036" +
    "\075\057\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\016\064\017\120\020\111\021\077\022\142\024" +
    "\027\035\065\036\075\057\036\001\001\000\024\016\064" +
    "\017\120\020\111\021\077\022\141\024\027\035\065\036" +
    "\075\057\036\001\001\000\024\016\064\017\120\020\111" +
    "\021\077\022\140\024\027\035\065\036\075\057\036\001" +
    "\001\000\024\016\064\017\120\020\111\021\077\022\121" +
    "\024\027\035\065\036\075\057\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\064\017\120\020\111" +
    "\021\077\024\137\035\065\036\075\057\036\001\001\000" +
    "\022\016\064\017\120\020\111\021\077\024\124\035\065" +
    "\036\075\057\036\001\001\000\002\001\001\000\020\016" +
    "\064\017\120\020\111\021\136\035\065\036\075\057\036" +
    "\001\001\000\020\016\064\017\120\020\111\021\127\035" +
    "\065\036\075\057\036\001\001\000\002\001\001\000\016" +
    "\016\064\017\135\020\111\035\065\036\075\057\036\001" +
    "\001\000\016\016\064\017\134\020\111\035\065\036\075" +
    "\057\036\001\001\000\016\016\064\017\133\020\111\035" +
    "\065\036\075\057\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\016\064\017\054\020\111\021" +
    "\077\022\067\024\027\025\107\026\070\027\041\030\043" +
    "\031\073\032\066\033\040\034\146\035\065\036\075\057" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\015\150\016\064\017\054\020\111\021\077\022\067\024" +
    "\027\025\107\026\070\027\041\030\043\031\073\032\066" +
    "\033\040\034\074\035\065\036\075\057\036\001\001\000" +
    "\002\001\001\000\062\007\152\010\032\011\101\012\110" +
    "\013\042\014\051\015\050\016\064\017\054\020\111\021" +
    "\077\022\067\024\027\025\107\026\070\027\041\030\043" +
    "\031\073\032\066\033\040\034\074\035\065\036\075\057" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\016\064\017\120\020\111\021\077\022" +
    "\067\024\027\025\107\026\070\027\041\030\156\035\065" +
    "\036\075\057\036\001\001\000\002\001\001\000\032\016" +
    "\064\017\120\020\111\021\077\022\067\024\027\025\107" +
    "\026\160\027\041\035\065\036\075\057\036\001\001\000" +
    "\002\001\001\000\030\016\064\017\120\020\111\021\077" +
    "\022\067\024\027\025\107\027\162\035\065\036\075\057" +
    "\036\001\001\000\002\001\001\000\026\016\064\017\120" +
    "\020\111\021\077\022\067\024\027\025\166\035\065\036" +
    "\075\057\036\001\001\000\026\016\064\017\120\020\111" +
    "\021\077\022\067\024\027\025\165\035\065\036\075\057" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\035\065\036\075\057" +
    "\172\001\001\000\062\007\173\010\032\011\101\012\110" +
    "\013\042\014\051\015\050\016\064\017\054\020\111\021" +
    "\077\022\067\024\027\025\107\026\070\027\041\030\043" +
    "\031\073\032\066\033\040\034\074\035\065\036\075\057" +
    "\036\001\001\000\002\001\001\000\036\016\064\017\120" +
    "\020\111\021\077\022\067\024\027\025\107\026\070\027" +
    "\041\030\043\031\175\035\065\036\075\057\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\015\210\016" +
    "\064\017\054\020\111\021\077\022\067\024\027\025\107" +
    "\026\070\027\041\030\043\031\073\032\066\033\040\034" +
    "\074\035\065\036\075\057\036\001\001\000\002\001\001" +
    "\000\046\015\206\016\064\017\054\020\111\021\077\022" +
    "\067\024\027\025\107\026\070\027\041\030\043\031\073" +
    "\032\066\033\040\034\074\035\065\036\075\057\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\016\064\017" +
    "\054\020\111\021\077\022\067\024\027\025\107\026\070" +
    "\027\041\030\043\031\073\032\066\033\040\034\230\035" +
    "\065\036\075\057\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\047\246" +
    "\050\241\051\251\001\001\000\002\001\001\000\010\047" +
    "\331\050\241\051\251\001\001\000\010\047\330\050\241" +
    "\051\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\052\255" +
    "\055\261\056\260\001\001\000\004\004\315\001\001\000" +
    "\006\055\313\056\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\270\050\241\051\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\047\273" +
    "\050\241\051\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\276\001\001\000\002\001\001\000\010" +
    "\047\300\050\241\051\251\001\001\000\004\010\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\047\304" +
    "\050\241\051\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\307\001\001\000\004\010\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\047\317\050\241\051\251\001\001" +
    "\000\004\010\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\042\323\043\060\044\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\326\043\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\015\333\016\064\017\054\020\111\021\077\022\067" +
    "\024\027\025\107\026\070\027\041\030\043\031\073\032" +
    "\066\033\040\034\074\035\065\036\075\057\036\001\001" +
    "\000\002\001\001\000\062\007\335\010\032\011\101\012" +
    "\110\013\042\014\051\015\050\016\064\017\054\020\111" +
    "\021\077\022\067\024\027\025\107\026\070\027\041\030" +
    "\043\031\073\032\066\033\040\034\074\035\065\036\075" +
    "\057\036\001\001\000\002\001\001\000\062\007\337\010" +
    "\032\011\101\012\110\013\042\014\051\015\050\016\064" +
    "\017\054\020\111\021\077\022\067\024\027\025\107\026" +
    "\070\027\041\030\043\031\073\032\066\033\040\034\074" +
    "\035\065\036\075\057\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\047\342\050\241\051\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\016\064\017" +
    "\120\020\111\021\077\022\067\024\027\025\107\026\070" +
    "\027\041\030\043\031\073\032\345\035\065\036\075\057" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\015\352\016\064\017" +
    "\054\020\111\021\077\022\067\024\027\025\107\026\070" +
    "\027\041\030\043\031\073\032\066\033\040\034\074\035" +
    "\065\036\075\057\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\035\065\036\075\057\361\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\372\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\052\377\055\261\056\260\001" +
    "\001\000\006\055\313\056\312\001\001\000\002\001\001" +
    "\000\004\004\u0102\001\001\000\004\010\u0103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PatateCompilateurParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PatateCompilateurParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PatateCompilateurParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	static StackEnvironment s = new StackEnvironment();

	public void syntax_error(Symbol s){
		System.out.println("[ERROR][SYNTAX] Ligne : " + s.left + " - Colonne : " + s.right);
	}

	public Symbol scan() throws java.lang.Exception {
		Symbol cur = getScanner().next_token();

		if (cur.sym == PatateCompilateurSymbol.LACC)
			s.addEnvironment();
		else if (cur.sym == PatateCompilateurSymbol.RACC)
			s.deleteEnvironment();
    return cur;
  }

	static Vector<Variable> args = new Vector<Variable>();

	public static void initVectorArgs(){
		args = new Vector<Variable>();
	}

	public static void addArg(Variable v){
		args.add(v);
	}

	public static Vector<Variable> getArgs(){
		return args;
	}

	public static void addFunction(String name){
		Function f = new Function(name, getArgs());
		if (!s.getCurrentEnvironment().add(f))
			System.out.println("[ERROR][SEMANT] Fonction déjà existante : " + name);
		initVectorArgs();
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PatateCompilateurParser$actions {
  private final PatateCompilateurParser parser;

  /** Constructor */
  CUP$PatateCompilateurParser$actions(PatateCompilateurParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PatateCompilateurParser$do_action(
    int                        CUP$PatateCompilateurParser$act_num,
    java_cup.runtime.lr_parser CUP$PatateCompilateurParser$parser,
    java.util.Stack            CUP$PatateCompilateurParser$stack,
    int                        CUP$PatateCompilateurParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PatateCompilateurParser$result;

      /* select the action based on the action number */
      switch (CUP$PatateCompilateurParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // class_function_declaration ::= FUNCTION ID function_parameters COLON type compound_statement 
            {
              Object RESULT =null;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)).right;
		Object fName = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)).value;
		 System.out.println("Fonction \"" + fName + "\" correcte"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_function_declaration",43, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-5)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // class_function_declaration ::= TILDE ID function_parameters compound_statement 
            {
              Object RESULT =null;
		 System.out.println("Destructeur correct"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_function_declaration",43, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // class_function_declaration ::= ID function_parameters compound_statement 
            {
              Object RESULT =null;
		 System.out.println("Constructeur correct"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_function_declaration",43, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // class_var_declaration ::= PRIVATE STATIC ID COLON type SEMIC 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_var_declaration",44, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-5)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // class_var_declaration ::= PRIVATE ID COLON type SEMIC 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_var_declaration",44, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // class_var_declaration ::= STATIC ID COLON type SEMIC 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_var_declaration",44, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // class_var_declaration ::= ID COLON type SEMIC 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_var_declaration",44, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // class_content ::= class_content class_var_declaration 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_content",40, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // class_content ::= class_content class_function_declaration 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_content",40, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // class_content ::= class_function_declaration 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_content",40, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // class_content ::= class_var_declaration 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_content",40, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // class_declaration ::= CLASS ID LACC class_content RACC 
            {
              Object RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).right;
		Object cName = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).value;
		 System.out.println("Classe \"" + cName + "\" correcte"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("class_declaration",42, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // type_complex ::= CLASS LACC class_content RACC 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_complex",39, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // type_complex ::= STRUCTURE LACC var_declaration_list RACC 
            {
              Object RESULT =null;
		 RESULT = new Type("structure", null);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_complex",39, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // type_complex ::= XOR type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = new Type("pointer", (Type)type);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_complex",39, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // type_complex ::= LISTOF type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = new Type("listof", (Type)type);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_complex",39, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // type_simple ::= SINGLEQUOTE ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = type;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_simple",38, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // type_simple ::= STRING 
            {
              Object RESULT =null;
		 RESULT = Type.STRING;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_simple",38, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // type_simple ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = Type.BOOLEAN;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_simple",38, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // type_simple ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = Type.FLOAT;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_simple",38, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // type_simple ::= CHARACTER 
            {
              Object RESULT =null;
		 RESULT = Type.CHAR;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_simple",38, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // type_simple ::= INT 
            {
              Object RESULT =null;
		 RESULT = Type.INT;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_simple",38, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // type ::= error 
            {
              Object RESULT =null;
		 System.out.println("[ERROR][SYNTAX] Type inconnu"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // type ::= type_complex 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = type;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // type ::= type_simple 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = type;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type_declaration ::= error 
            {
              Object RESULT =null;
		 System.out.println("[ERROR][SYNTAX] Erreur dans la déclaration de type"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_declaration",36, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type_declaration ::= TYPE ID EQ type SEMIC 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		 RESULT = new NodeType((String)name, (Type)t);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("type_declaration",36, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // var_declaration_list ::= var_declaration_list var_declaration 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = decl;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("var_declaration_list",34, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // var_declaration_list ::= var_declaration 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = decl; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("var_declaration_list",34, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // var_and_type ::= ID COLON type 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			RESULT = new NodeVar((String)name, (Type)type);
			
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("var_and_type",33, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // var_declaration ::= var_and_type SEMIC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		 RESULT = new NodeDeclaration((NodeVar)v);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("var_declaration",32, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // assignment_operator ::= error 
            {
              Object RESULT =null;
		 System.out.println("[ERROR][SYNTAX] Opérateur d'assignement inconnu"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",17, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // assignment_operator ::= OR_ASSIGN 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.OR_ASSIGN); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",17, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // assignment_operator ::= XOR_ASSIGN 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.XOR_ASSIGN); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",17, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // assignment_operator ::= AND_ASSIGN 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.AND_ASSIGN); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",17, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assignment_operator ::= SUB_ASSIGN 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.SUB_ASSIGN); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",17, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // assignment_operator ::= ADD_ASSIGN 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.ADD_ASSIGN); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",17, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assignment_operator ::= MOD_ASSIGN 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.MOD_ASSIGN); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",17, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assignment_operator ::= DIV_ASSIGN 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.DIV_ASSIGN); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",17, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // assignment_operator ::= MUL_ASSIGN 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.MUL_ASSIGN); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",17, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // assignment_operator ::= EQ 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.EQ); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",17, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeAssignementExpression((NodeOperator)o,
					(NodeExpression)u, (NodeExpression)a);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // assignment_expression ::= logical_or_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // logical_or_expression ::= logical_or_expression OR_OP logical_and_expression 
            {
              Object RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeLogicalExpression(new NodeOperator(EnumTag.OR_OP),
					(NodeExpression)lo, (NodeExpression)la);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",25, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // logical_or_expression ::= logical_and_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",25, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeLogicalExpression(new NodeOperator(EnumTag.AND_OP),
					(NodeExpression)l, (NodeExpression)i);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",24, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // logical_and_expression ::= inclusive_or_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",24, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeLogicalExpression(new NodeOperator(EnumTag.OR),
					(NodeExpression)i, (NodeExpression)e);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",23, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",23, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeLogicalExpression(new NodeOperator(EnumTag.XOR),
					(NodeExpression)e, (NodeExpression)a);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",22, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exclusive_or_expression ::= and_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",22, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // and_expression ::= and_expression AND equality_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeLogicalExpression(new NodeOperator(EnumTag.AND),
					(NodeExpression)a, (NodeExpression)e);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("and_expression",20, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // and_expression ::= equality_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("and_expression",20, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // equality_expression ::= equality_expression NE_OP relational_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeEqualityExpression(new NodeOperator(EnumTag.NE_OP),
					(NodeExpression)e, (NodeExpression)r);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("equality_expression",21, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // equality_expression ::= equality_expression EQ_OP relational_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeEqualityExpression(new NodeOperator(EnumTag.EQ_OP),
					(NodeExpression)e, (NodeExpression)r);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("equality_expression",21, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // equality_expression ::= relational_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("equality_expression",21, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // relational_expression ::= relational_expression GE_OP shift_expression 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeRelationalExpression(new NodeOperator(EnumTag.GE_OP),
					(NodeExpression)r, (NodeExpression)s);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("relational_expression",19, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // relational_expression ::= relational_expression LE_OP shift_expression 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeRelationalExpression(new NodeOperator(EnumTag.LE_OP),
					(NodeExpression)r, (NodeExpression)s);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("relational_expression",19, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // relational_expression ::= relational_expression RIGHT shift_expression 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeRelationalExpression(new NodeOperator(EnumTag.RIGHT),
					(NodeExpression)r, (NodeExpression)s);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("relational_expression",19, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // relational_expression ::= relational_expression LEFT shift_expression 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeRelationalExpression(new NodeOperator(EnumTag.LEFT),
					(NodeExpression)r, (NodeExpression)s);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("relational_expression",19, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // relational_expression ::= shift_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("relational_expression",19, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // shift_expression ::= shift_expression RIGHT_OP additive_expression 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeShiftExpression(new NodeOperator(EnumTag.LEFT_OP),
					(NodeExpression)s, (NodeExpression)a);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("shift_expression",16, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // shift_expression ::= shift_expression LEFT_OP additive_expression 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeShiftExpression(new NodeOperator(EnumTag.LEFT_OP),
					(NodeExpression)s, (NodeExpression)a);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("shift_expression",16, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // shift_expression ::= additive_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("shift_expression",16, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeAddExpression(new NodeOperator(EnumTag.MINUS),
					(NodeExpression)a, (NodeExpression)m);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("additive_expression",18, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeAddExpression(new NodeOperator(EnumTag.PLUS),
					(NodeExpression)a, (NodeExpression)m);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("additive_expression",18, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // additive_expression ::= multiplicative_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("additive_expression",18, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // multiplicative_expression ::= multiplicative_expression MOD unary_expression 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeMultExpression(new NodeOperator(EnumTag.MOD),
					(NodeExpression)m, (NodeExpression)u);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeMultExpression(new NodeOperator(EnumTag.DIV),
					(NodeExpression)m, (NodeExpression)u);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // multiplicative_expression ::= multiplicative_expression MULT unary_expression 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
				RESULT = new NodeMultExpression(new NodeOperator(EnumTag.MULT),
					(NodeExpression)m, (NodeExpression)u);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multiplicative_expression ::= unary_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unary_operator ::= NE 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.NE); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("unary_operator",14, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unary_operator ::= TILDE 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.TILDE); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("unary_operator",14, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unary_operator ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.MINUS); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("unary_operator",14, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unary_operator ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.PLUS); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("unary_operator",14, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unary_operator ::= MULT 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.MULT); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("unary_operator",14, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unary_operator ::= AND 
            {
              Object RESULT =null;
		 RESULT = new NodeOperator(EnumTag.AND); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("unary_operator",14, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unary_expression ::= unary_operator unary_expression 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = new NodeUnaryExpression(
				(NodeOperator)o, (NodeExpression)e);
			
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("unary_expression",13, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unary_expression ::= DEC_OP unary_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = new NodeUnaryExpression(
				new NodeOperator(EnumTag.DEC_OP), (NodeExpression)e);
			
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("unary_expression",13, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unary_expression ::= INC_OP unary_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = new NodeUnaryExpression(
				new NodeOperator(EnumTag.INC_OP), (NodeExpression)e);
			
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("unary_expression",13, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unary_expression ::= postfix_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("unary_expression",13, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // primary_expression ::= LPAR expression RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // primary_expression ::= array_of_elements 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primary_expression ::= constant_value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = v; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primary_expression ::= STRING 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = new NodeConst(Type.STRING, (String)val); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primary_expression ::= NBV 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = new NodeConst(Type.FLOAT, (float)val); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // primary_expression ::= NB 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = new NodeConst(Type.INT, (int)val); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primary_expression ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = new NodeVar((String)name); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elements ::= error 
            {
              Object RESULT =null;
		 System.out.println("[ERROR][SYNTAX] Erreur de syntaxe dans le tableau"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("elements",29, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // elements ::= elements COMMA primary_expression 
            {
              Object RESULT =null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object elements = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			if (elements instanceof NodeArray){
				((NodeArray)elements).addChild((NodeExpression)e);
				RESULT = elements;
			}
			else if (elements instanceof NodeExpression){
				NodeArray a = new NodeArray((NodeExpression)elements);
				a.addChild((NodeExpression)e);
				RESULT = a;
			}
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("elements",29, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elements ::= primary_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("elements",29, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // array_of_elements ::= LBRA elements RBRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("array_of_elements",28, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constant_value ::= NULL 
            {
              Object RESULT =null;
		 RESULT = new NodeConst(Type.NULL, null); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("constant_value",27, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // constant_value ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new NodeConst(Type.BOOLEAN, false); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("constant_value",27, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constant_value ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new NodeConst(Type.BOOLEAN, true); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("constant_value",27, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // postfix_expression ::= postfix_expression DEC_OP 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		
			RESULT = new NodePostfixExpression(new NodeOperator(EnumTag.DEC_OP),
				(NodeExpression)p);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",12, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // postfix_expression ::= postfix_expression INC_OP 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		
			RESULT = new NodePostfixExpression(new NodeOperator(EnumTag.INC_OP),
				(NodeExpression)p);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",12, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // postfix_expression ::= postfix_expression ARROW ID 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			RESULT = new NodePostfixExpression(new NodeOperator(EnumTag.ARROW),
				(NodeExpression)p, new NodeVar((String)name));
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",12, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // postfix_expression ::= postfix_expression POINT ID 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			RESULT = new NodePostfixExpression(new NodeOperator(EnumTag.POINT),
				(NodeExpression)p, new NodeVar((String)name));
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",12, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // postfix_expression ::= postfix_expression LPAR expression RPAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		
			RESULT = new NodeCall((NodeExpression)p, (NodeExpression)e);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",12, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // postfix_expression ::= postfix_expression LPAR RPAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		
			RESULT = new NodeCall((NodeExpression)p);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",12, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // postfix_expression ::= postfix_expression LBRA expression RBRA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		
			RESULT = new NodeVarArray((NodeExpression)p, (NodeExpression)e);
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",12, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // postfix_expression ::= primary_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",12, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression COMMA assignment_expression 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			((NodeExpression)list).addChild((NodeExpression)e); // NOT SURE
			RESULT = list;
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= assignment_expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression_statement ::= error SEMIC 
            {
              Object RESULT =null;
		 System.out.println("[ERROR][SYNTAX] Erreur dans l'expression"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("expression_statement",7, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression_statement ::= expression SEMIC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		 RESULT = new NodeExpressionStatement((NodeExpression)e); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("expression_statement",7, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression_statement ::= SEMIC 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("expression_statement",7, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // end_statement ::= BREAK SEMIC 
            {
              Object RESULT =null;
		 RESULT = new NodeEndStatement("break"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("end_statement",8, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // end_statement ::= STOP SEMIC 
            {
              Object RESULT =null;
		 RESULT = new NodeEndStatement("stop"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("end_statement",8, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // end_statement ::= RETURN expression SEMIC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		 RESULT = new NodeEndStatement((NodeExpression) e);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("end_statement",8, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_statement ::= IF LPAR expression RPAR statement ELSE statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int stElseleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int stElseright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object stElse = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			RESULT = new NodeIfStatement((NodeExpression) e, (NodeStatement) st, (NodeStatement) stElse);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("if_statement",9, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-6)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if_statement ::= IF LPAR expression RPAR statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			RESULT = new NodeIfStatement((NodeExpression) e, (NodeStatement) st);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("if_statement",9, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // loop_statement ::= REPEAT statement WHILE LPAR expression RPAR 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		
			RESULT = new NodeLoopStatement((NodeStatement)st, (NodeExpression)e); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("loop_statement",10, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-5)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // loop_statement ::= WHILE LPAR expression RPAR statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			RESULT = new NodeLoopStatement((NodeExpression)e, (NodeStatement)st); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("loop_statement",10, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // loop_statement ::= FOREACH ID IN primary_expression statement 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			RESULT = new NodeLoopStatement((String)varName, (NodeExpression)e,
				(NodeStatement)st);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("loop_statement",10, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-4)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= end_statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= loop_statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = l; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= if_statement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= expression_statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= compound_statement 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = c; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // block_item ::= statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("block_item",30, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // block_item ::= type_declaration 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = t;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("block_item",30, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block_item ::= var_declaration 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = v;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("block_item",30, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block_item_list ::= block_item_list block_item 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object item = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			if (list instanceof ArbSynt){
				Vector<ArbSynt> v = new Vector<ArbSynt>();
				v.add((ArbSynt)list);
				v.add((ArbSynt)item);
				RESULT = v;
			}
			else if (list instanceof Vector){
				((Vector<ArbSynt>)list).add((ArbSynt)item);
				RESULT = list;
			}
			
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("block_item_list",31, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // block_item_list ::= block_item 
            {
              Object RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object item = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = item;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("block_item_list",31, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // compound_statement ::= LACC block_item_list RACC 
            {
              Object RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object block = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		 RESULT = block; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // compound_statement ::= LACC RACC 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters_list ::= parameters_list COMMA var_and_type 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		
			if (list instanceof Vector){
				((Vector<NodeVar>)list).add((NodeVar)v);
				RESULT = list;
			}
			else {
				Vector<NodeVar> l = new Vector<NodeVar>();
				l.add((NodeVar)v);
				l.add((NodeVar)list);
				RESULT = l;
			}
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("parameters_list",4, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameters_list ::= var_and_type 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 RESULT = v; 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("parameters_list",4, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_parameters ::= LPAR parameters_list RPAR 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		
			if (l instanceof Vector)
				RESULT = l;
			else {
				Vector<NodeVar> list = new Vector<NodeVar>();
				list.add((NodeVar)l);
				RESULT = list;
			} 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("function_parameters",2, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_parameters ::= LPAR RPAR 
            {
              Object RESULT =null;
		 RESULT = new Vector<NodeVar>(); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("function_parameters",2, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_declaration ::= error 
            {
              Object RESULT =null;
		 System.out.println("[ERROR][SYNTAX] Erreur dans la fonction"); 
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("function_declaration",3, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_declaration ::= FUNCTION ID function_parameters SEMIC 
            {
              Object RESULT =null;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object fName = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		 System.out.println("Fonction \"" + fName + "\" déclarée");
		
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("function_declaration",3, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_declaration ::= FUNCTION ID function_parameters compound_statement 
            {
              Object RESULT =null;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object fName = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		 System.out.println("Fonction \"" + fName + "\" correcte");
			
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("function_declaration",3, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_declaration ::= PROCEDURE ID function_parameters SEMIC 
            {
              Object RESULT =null;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object fName = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		 System.out.println("Procédure \"" + fName + "\" déclarée");
			
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("function_declaration",3, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration ::= PROCEDURE ID function_parameters compound_statement 
            {
              Object RESULT =null;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).right;
		Object fName = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object instructions = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 System.out.println("Procédure \"" + fName + "\" correcte");
			if (instructions instanceof Vector)
				RESULT = new NodeProcedure((String)fName, (Vector<NodeVar>)args,
					(Vector<ArbSynt>)instructions);
			else if (instructions instanceof ArbSynt)
				RESULT = new NodeProcedure((String)fName, (Vector<NodeVar>)args,
					(ArbSynt)instructions);
			
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("function_declaration",3, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-3)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_elements ::= program_elements class_declaration 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("program_elements",1, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_elements ::= program_elements function_declaration 
            {
              Object RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 System.out.println(fn);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("program_elements",1, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_elements ::= class_declaration 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("program_elements",1, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_elements ::= function_declaration 
            {
              Object RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.peek()).value;
		 System.out.println(fn);
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("program_elements",1, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_elements 
            {
              Object RESULT =null;

              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          return CUP$PatateCompilateurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)).value;
		RESULT = start_val;
              CUP$PatateCompilateurParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.elementAt(CUP$PatateCompilateurParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatateCompilateurParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PatateCompilateurParser$parser.done_parsing();
          return CUP$PatateCompilateurParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

